<html>

<head>
  <title>Analyze</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>
  <%- include partials/navigation.ejs %>
    <h1>Analytics</h1>
    <script>
    var GoogleAuth;

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function initClient() {
      gapi.client.init({
        'clientId': '721555634747-lnb3tang4qeiluuo09k4hvcedct6nf9c.apps.googleusercontent.com',
        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest'],
        'scope': 'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/yt-analytics.readonly https://www.googleapis.com/auth/youtube.readonly'
      }).then(function() {
        GoogleAuth = gapi.auth2.getAuthInstance();

        GoogleAuth.isSignedIn.listen(updateSigninStatus);

        setSigninStatus();
      });
    }

    function handleAuthClick(event) {
      GoogleAuth.signIn();
    }

    function setSigninStatus() {
      var user = GoogleAuth.currentUser.get();
      isAuthorized = user.hasGrantedScopes(
        'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/yt-analytics.readonly https://www.googleapis.com/auth/youtube.readonly');
      if (isAuthorized) {
        $("#current-user").append(user.w3.ig)
        loadAPIClientInterfaces()
      }
    }

    function updateSigninStatus(isSignedIn) {
      setSigninStatus();
    }

    function loadAPIClientInterfaces() {
      console.log('made it here');
      gapi.client.load('youtube', 'v3', function() {
        gapi.client.load('youtubeAnalytics', 'v1', function() {
          getUserChannel();
        });
      });
    }

    function getUserChannel() {
      var request = gapi.client.youtube.channels.list({
        mine: true,
        part: 'id,contentDetails,statistics'
      });

      request.execute(function(response) {
        if ('error' in response) {
          console.log(response.error.message);
        } else {
          channelId = response.items[0].id;
          // console.log('userchannel response', response)
          var uploadsListId = response.items[0].contentDetails.relatedPlaylists.uploads;
          let stats = response.items[0].statistics
          $("#api-data").append(`<div> Total Videos: ${stats.videoCount} </div>`)
          $("#api-data").append(`<div> Number of Subscribers: ${stats.subscriberCount} </div>`)
          $("#api-data").append(`<div> Total Comments: ${stats.commentCount} </div>`)
          $("#api-data").append(`<div> Total Views: ${stats.viewCount} </div>`)

          let commentViewRatio
          if (stats.viewCount != 0) {
            commentViewRatio = stats.commentCount / stats.viewCount
          } else {
            commentViewRatio = 'cannot be calculated for this video'
          }

          $("#api-data").append(`<div> Comments/Views Ratio ${commentViewRatio} </div>`)

          getPlaylistItems(uploadsListId);
        }
      });
    }

    function getPlaylistItems(listId) {
      var request = gapi.client.youtube.playlistItems.list({
        playlistId: listId,
        part: 'snippet',
        maxResults: 30
      });

      request.execute(function(response) {
        if ('error' in response) {
          console.log(response.error);
        } else {
          if ('items' in response) {
            var videoIds = $.map(response.items, function(item) {
              return item.snippet.resourceId.videoId;
            });
            getVideoMetadata(videoIds);
          } else {
            $('#video-list').append('<li>There are no videos in your channel.</li>');
          }
        }
      });
    }

    function getVideoMetadata(videoIds) {
      var request = gapi.client.youtube.videos.list({
        id: videoIds.join(','),
        part: 'id,snippet,statistics'
      });

      request.execute(function(response) {
        if ('error' in response) {
          console.log(response.error);
        } else {
          console.log('videos response', response)
          var videoList = $('#video-list');
          $.each(response.items, function() {
            // if (this.statistics.viewCount == 0) {
            //   return;
            // }
            var title = this.snippet.title;
            var videoId = this.id;

            buildApiRequest('GET',
              '/youtube/v3/commentThreads', {
                'part': 'snippet,replies',
                'videoId': videoId
              });

            var liElement = $('<li id=' + videoId + '>');
            var aElement = $('<a>');
            aElement.attr('href', 'https://www.youtube.com/watch?v=' + videoId);
            aElement.text(title);

            liElement.append(aElement);
            liElement.append('<div> Likes: ' + this.statistics.likeCount + ' Dislikes: ' + this.statistics.dislikeCount + "</div>")

            var ratingRatio
            if (this.statistics.dislikeCount != 0) {
              ratingRatio = this.statistics.likeCount / this.statistics.dislikeCount
            } else {
              ratingRatio = 'cannot be calculated for this video'
            }

            liElement.append(`<div> Likes/Dislike Ratio ${ratingRatio} </div> </br>`)
            videoList.append(liElement);
          });
        }
      });
    }



    function removeEmptyParams(params) {
      for (var p in params) {
        if (!params[p] || params[p] == 'undefined') {
          delete params[p];
        }
      }
      return params;
    }

    function executeRequest(request, videoId) {
      request.execute(function(response) {
        console.log('response', response)
        if (response.error) {
          $('#' + videoId).append('<div> Could not retrieve comments. Error message: ' + response.error.errors[0].reason + '</div> </br>')
        } else if (response.items.length > 0) {
          $('#' + videoId).append('<div> Comments: </div>')
          response.items.forEach(comment => {
            let commentDetails = comment.snippet.topLevelComment.snippet
            // console.log('comment', commentDetails.textDisplay);
            commentDetails.publishedAt = new Date()
            let commentDiv =
            `<div>
            User: ${commentDetails.authorDisplayName} - ${commentDetails.publishedAt.toLocaleDateString('en-us', {year: 'numeric', month: 'long', day: 'numeric'})} </br>
            Comment: ${commentDetails.textDisplay} 
            </div> </br>`
            $('#' + videoId).append(commentDiv)
            /*  Available comment details
                commentDetails.authorDisplayName
                commentDetails.authorProfileImageUrl
                commentDetails.likeCount
                commentDetails.publishedAt
                commentDetails.updatedAt */
          });
        } else {
          $('#' + videoId).append('<div> No comments on this video </div> </br>')
        }
      });
    }

    function buildApiRequest(requestMethod, path, params, properties) {
      params = removeEmptyParams(params);
      var request;
      if (properties) {
        var resource = createResource(properties);
        request = gapi.client.request({
          'body': resource,
          'method': requestMethod,
          'path': path,
          'params': params
        });
      } else {
        request = gapi.client.request({
          'method': requestMethod,
          'path': path,
          'params': params
        });
      }
      executeRequest(request, params.videoId);
    }

    function getAccessToken(event) {
      return GoogleAuth.currentUser.get().getAuthResponse(true).access_token;
    }

    </script>

    <p id="current-user"></p>

    <div id="api-data"></div>
    <ul id="video-list">Videos</ul>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()" onreadystatechange="if (this.readyState === 'complete') this.onload()">


    </script>
</body>

</html>
