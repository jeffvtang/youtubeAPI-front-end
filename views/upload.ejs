<html>

<head>
  <title>Upload a Youtube Video</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>
  <%- include partials/navigation.ejs %>    
  <h1>Upload</h1>
  <script>
    var GoogleAuth;
    var selectedFile;

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function initClient() {
      gapi.client.init({
        'clientId': '721555634747-lnb3tang4qeiluuo09k4hvcedct6nf9c.apps.googleusercontent.com',
        'discoveryDocs': ['https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest'],
        'scope': 'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/yt-analytics.readonly https://www.googleapis.com/auth/youtube.readonly'
      }).then(function () {
        GoogleAuth = gapi.auth2.getAuthInstance();

        GoogleAuth.isSignedIn.listen(updateSigninStatus);

        setSigninStatus();

        $("#select-file-button").click(function () {
          $("#select-file").click();
        });
        $("#upload-file-button").click(function () {
          defineRequest();
        });
        $("#select-file").bind("change", function () {
          selectedFile = $("#select-file").prop("files")[0];
          $('#upload-file-button').prop('disabled', false).text('Upload file').show()
          $("#vid-details").empty()
          $("#vid-details").append(`<span id="vid-size">`, (selectedFile.size / 1024 / 1024).toFixed(2), ` MB</span>`)
          $("#vid-details").append(
            `
          <br>
          Title <input id="vid-title" type="text">
          <br>
          Tags (separated by commas) <input id="vid-tags" type="text">
          <br>
          Description <input id="vid-description" type="text">
          <br>
          Privacy
          <br>
          <form id="vid-privacy-form">
          <input type="radio" id="vid-privacy" name="vid-privacy" value="public" checked> Public<br>
          <input type="radio" id="vid-privacy" name="vid-privacy" value="private"> Private<br>
          <input type="radio" id="vid-privacy" name="vid-privacy" value="unlisted"> Unlisted<br>
          </form>
          `
          )
        });
      });
    }


    function setSigninStatus() {
      var user = GoogleAuth.currentUser.get();
      isAuthorized = user.hasGrantedScopes(
        'https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/yt-analytics.readonly https://www.googleapis.com/auth/youtube.readonly');
      if (isAuthorized) {
        $("#current-user").append(user.w3.ig)        
      }
    }

    function updateSigninStatus(isSignedIn) {
      setSigninStatus();
    }

    function createResource(properties) {
      var resource = {};
      var normalizedProps = properties;
      for (var p in properties) {
        var value = properties[p];
        if (p && p.substr(-2, 2) == '[]') {
          var adjustedName = p.replace('[]', '',);
          if (value) {
            normalizedProps[adjustedName] = value.replace(' ','').split(',');
          }
          delete normalizedProps[p];
        }
      }
      for (var p in normalizedProps) {
        if (normalizedProps.hasOwnProperty(p) && normalizedProps[p]) {
          var propArray = p.split('.');
          var ref = resource;
          for (var pa = 0; pa < propArray.length; pa++) {
            var key = propArray[pa];
            if (pa == propArray.length - 1) {
              ref[key] = normalizedProps[p];
            } else {
              ref = ref[key] = ref[key] || {};
            }
          }
        };
      }
      return resource;
    }

    function removeEmptyParams(params) {
      for (var p in params) {
        if (!params[p] || params[p] == 'undefined') {
          delete params[p];
        }
      }
      return params;
    }

    function executeRequest(request) {
      request.execute(function (response) {
        console.log(response);
      });
    }

    function buildApiRequest(requestMethod, path, params, properties) {
      params = removeEmptyParams(params);
      var request;
      if (properties) {
        var resource = createResource(properties);
        request = gapi.client.request({
          'body': resource,
          'method': requestMethod,
          'path': path,
          'params': params
        });
      } else {
        request = gapi.client.request({
          'method': requestMethod,
          'path': path,
          'params': params
        });
      }
      executeRequest(request);
    }

    function getAccessToken(event) {
      return GoogleAuth.currentUser.get().getAuthResponse(true).access_token;
    }

    var RetryHandler = function () {
      this.interval = 1000; // Start at one second
      this.maxInterval = 60 * 1000; // Don't wait longer than a minute 
    };

    RetryHandler.prototype.retry = function (fn) {
      setTimeout(fn, this.interval);
      this.interval = this.nextInterval_();
    };

    RetryHandler.prototype.reset = function () {
      this.interval = 1000;
    };

    RetryHandler.prototype.nextInterval_ = function () {
      var interval = this.interval * 2 + this.getRandomInt_(0, 1000);
      return Math.min(interval, this.maxInterval);
    };

    RetryHandler.prototype.getRandomInt_ = function (min, max) {
      return Math.floor(Math.random() * (max - min + 1) + min);
    };

    var MediaUploader = function (options) {
      var noop = function () {};
      this.file = options.file;
      this.contentType = options.contentType || this.file.type || 'application/octet-stream';
      this.metadata = options.metadata || {
        'title': this.file.name,
        'mimeType': this.contentType
      };
      this.token = options.token;
      this.onComplete = options.onComplete || noop;
      this.onProgress = options.onProgress || noop;
      this.onError = options.onError || noop;
      this.offset = options.offset || 0;
      this.chunkSize = options.chunkSize || 0;
      this.retryHandler = new RetryHandler();

      this.url = options.url;
      if (!this.url) {
        var params = options.params || {};
        params.uploadType = 'resumable';
        this.url = this.buildUrl_(options.fileId, params, options.baseUrl);
      }
      this.httpMethod = options.fileId ? 'PUT' : 'POST';
    };

    MediaUploader.prototype.upload = function () {
      var self = this;
      var xhr = new XMLHttpRequest();

      xhr.open(this.httpMethod, this.url, true);
      xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.setRequestHeader('X-Upload-Content-Length', this.file.size);
      xhr.setRequestHeader('X-Upload-Content-Type', this.contentType);

      xhr.onload = function (e) {
        if (e.target.status < 400) {
          var location = e.target.getResponseHeader('Location');
          this.url = location;
          this.sendFile_();
        } else {
          this.onUploadError_(e);
        }
      }.bind(this);
      xhr.onerror = this.onUploadError_.bind(this);
      xhr.send(JSON.stringify(this.metadata));
    };

    MediaUploader.prototype.sendFile_ = function () {
      var content = this.file;
      var end = this.file.size;

      if (this.offset || this.chunkSize) {
        if (this.chunkSize) {
          end = Math.min(this.offset + this.chunkSize, this.file.size);
        }
        content = content.slice(this.offset, end);
      }

      var xhr = new XMLHttpRequest();
      xhr.open('PUT', this.url, true);
      xhr.setRequestHeader('Content-Type', this.contentType);
      xhr.setRequestHeader('Content-Range', 'bytes ' + this.offset + '-' + (end - 1) + '/' + this.file.size);
      xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);
      if (xhr.upload) {
        xhr.upload.addEventListener('progress', this.onProgress);
      }
      xhr.onload = this.onContentUploadSuccess_.bind(this);
      xhr.onerror = this.onContentUploadError_.bind(this);
      xhr.send(content);
    };

    MediaUploader.prototype.resume_ = function () {
      var xhr = new XMLHttpRequest();
      xhr.open('PUT', this.url, true);
      xhr.setRequestHeader('Content-Range', 'bytes */' + this.file.size);
      xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);
      if (xhr.upload) {
        xhr.upload.addEventListener('progress', this.onProgress);
      }
      xhr.onload = this.onContentUploadSuccess_.bind(this);
      xhr.onerror = this.onContentUploadError_.bind(this);
      xhr.send();
    };

    MediaUploader.prototype.extractRange_ = function (xhr) {
      var range = xhr.getResponseHeader('Range');
      if (range) {
        this.offset = parseInt(range.match(/\d+/g).pop(), 10) + 1;
      }
    };

    MediaUploader.prototype.onContentUploadSuccess_ = function (e) {
      if (e.target.status == 200 || e.target.status == 201) {
        this.onComplete(e.target.response);
      } else if (e.target.status == 308) {
        this.extractRange_(e.target);
        this.retryHandler.reset();
        this.sendFile_();
      }
    };

    MediaUploader.prototype.onContentUploadError_ = function (e) {
      if (e.target.status && e.target.status < 500) {
        this.onError(e.target.response);
      } else {
        this.retryHandler.retry(this.resume_.bind(this));
      }
    };

    MediaUploader.prototype.onUploadError_ = function (e) {
      this.onError(e.target.response); // TODO - Retries for initial upload
    };

    MediaUploader.prototype.buildQuery_ = function (params) {
      params = params || {};
      return Object.keys(params).map(function (key) {
        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
      }).join('&');
    };

    MediaUploader.prototype.buildUrl_ = function (id, params, baseUrl) {
      var url = baseUrl;
      if (id) {
        url += id;
      }
      var query = this.buildQuery_(params);
      if (query) {
        url += '?' + query;
      }
      return url;
    };

    function defineRequest() {
      let vidtitle = $("#vid-title").val()
      let vidtags = $("#vid-tags").val()
      let viddescription = $("#vid-description").val()
      let vidprivacy = $("#vid-privacy:checked").val()

      var metadata = createResource({
        'snippet.categoryId': '22',
        'snippet.defaultLanguage': '',
        'snippet.description': viddescription,
        'snippet.tags[]': vidtags,
        'snippet.title': vidtitle,
        'status.embeddable': '',
        'status.license': '',
        'status.privacyStatus': vidprivacy,
        'status.publicStatsViewable': ''
      });
      console.log(metadata)
      var token = getAccessToken();
      if (!token) {
        alert("You need to authorize the request to proceed.");
        return;
      }

      if (!selectedFile) {
        alert("You need to select a file to proceed.");
        return;
      }
      var params = {
        'part': 'snippet,status'
      };

      var uploader = new MediaUploader({
        baseUrl: 'https://www.googleapis.com/upload/youtube/v3/videos',
        file: selectedFile,
        token: token,
        metadata: metadata,
        params: params,
        onError: function (data) {
          var message = data;
          try {
            var errorResponse = JSON.parse(data);
            message = errorResponse.error.message;
          } finally {
            alert(message);
          }
        }.bind(this),
        onProgress: function (data) {
          $('#upload-file-button').prop('disabled', true).text('Uploading...')          
          $('#select-file').prop('disabled', true)          
          var currentTime = Date.now();
          console.log('Progress: ' + data.loaded + ' bytes loaded out of ' + data.total);
          var totalBytes = data.total;
        }.bind(this),
        onComplete: function (data) {
          $('#upload-file-button').text('Upload Complete').hide()          
          $('#select-file').prop('disabled', false)          
          var uploadResponse = JSON.parse(data);
          $("#vid-details").append('<span>Upload complete for video:<br> <a href="https://www.youtube.com/watch?v=' + uploadResponse.id + '">https://www.youtube.com/watch?v=' + uploadResponse.id + '</a></span>');
        }.bind(this)
      });

      uploader.upload();
    }
  </script>

  <p id="current-user"></p>
  <input id="select-file" type="file">
  <p id="vid-details"></p>
  <button id="upload-file-button">Upload file</button>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
  <script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()" onreadystatechange="if (this.readyState === 'complete') this.onload()">
  </script>
</body>

</html>